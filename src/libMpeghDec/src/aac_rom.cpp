/*-----------------------------------------------------------------------------
Software License for The Fraunhofer FDK MPEG-H Software

Copyright (c) 2018 - 2023 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten
Forschung e.V. and Contributors
All rights reserved.

1. INTRODUCTION

The "Fraunhofer FDK MPEG-H Software" is software that implements the ISO/MPEG
MPEG-H 3D Audio standard for digital audio or related system features. Patent
licenses for necessary patent claims for the Fraunhofer FDK MPEG-H Software
(including those of Fraunhofer), for the use in commercial products and
services, may be obtained from the respective patent owners individually and/or
from Via LA (www.via-la.com).

Fraunhofer supports the development of MPEG-H products and services by offering
additional software, documentation, and technical advice. In addition, it
operates the MPEG-H Trademark Program to ease interoperability testing of end-
products. Please visit www.mpegh.com for more information.

2. COPYRIGHT LICENSE

Redistribution and use in source and binary forms, with or without modification,
are permitted without payment of copyright license fees provided that you
satisfy the following conditions:

* You must retain the complete text of this software license in redistributions
of the Fraunhofer FDK MPEG-H Software or your modifications thereto in source
code form.

* You must retain the complete text of this software license in the
documentation and/or other materials provided with redistributions of
the Fraunhofer FDK MPEG-H Software or your modifications thereto in binary form.
You must make available free of charge copies of the complete source code of
the Fraunhofer FDK MPEG-H Software and your modifications thereto to recipients
of copies in binary form.

* The name of Fraunhofer may not be used to endorse or promote products derived
from the Fraunhofer FDK MPEG-H Software without prior written permission.

* You may not charge copyright license fees for anyone to use, copy or
distribute the Fraunhofer FDK MPEG-H Software or your modifications thereto.

* Your modified versions of the Fraunhofer FDK MPEG-H Software must carry
prominent notices stating that you changed the software and the date of any
change. For modified versions of the Fraunhofer FDK MPEG-H Software, the term
"Fraunhofer FDK MPEG-H Software" must be replaced by the term "Third-Party
Modified Version of the Fraunhofer FDK MPEG-H Software".

3. No PATENT LICENSE

NO EXPRESS OR IMPLIED LICENSES TO ANY PATENT CLAIMS, including without
limitation the patents of Fraunhofer, ARE GRANTED BY THIS SOFTWARE LICENSE.
Fraunhofer provides no warranty of patent non-infringement with respect to this
software. You may use this Fraunhofer FDK MPEG-H Software or modifications
thereto only for purposes that are authorized by appropriate patent licenses.

4. DISCLAIMER

This Fraunhofer FDK MPEG-H Software is provided by Fraunhofer on behalf of the
copyright holders and contributors "AS IS" and WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, including but not limited to the implied warranties of
merchantability and fitness for a particular purpose. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE for any direct, indirect,
incidental, special, exemplary, or consequential damages, including but not
limited to procurement of substitute goods or services; loss of use, data, or
profits, or business interruption, however caused and on any theory of
liability, whether in contract, strict liability, or tort (including
negligence), arising in any way out of the use of this software, even if
advised of the possibility of such damage.

5. CONTACT INFORMATION

Fraunhofer Institute for Integrated Circuits IIS
Attention: Division Audio and Media Technologies - MPEG-H FDK
Am Wolfsmantel 33
91058 Erlangen, Germany
www.iis.fraunhofer.de/amm
amm-info@iis.fraunhofer.de
-----------------------------------------------------------------------------*/

/************************* MPEG-H 3DA decoder library **************************

   Author(s):   Josef Hoepfl, Tobias Chalupka

   Description: Definition of constant tables

*******************************************************************************/

#include "aac_rom.h"

/**
 * \brief Table representing scale factor gains. Given a scale factor sf, and a value pSpec[i] the
 * gain is given by: MantissaTable[sf % 4][msb] = 2^(sf % 4) / (1<<ExponentTable[sf % 4][msb]
 * The second dimension "msb" represents the upper scale factor bit count floor(log2(scalefactor >>
 * 2)) The corresponding exponents for the values in this tables are stored in ExponentTable[sf %
 * 4][msb] below.
 */
const FIXP_DBL MantissaTable[4][14] = {
    {0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00,
     0x6597FA80, 0x40000000, 0x50A28C00, 0x6597FA80, 0x40000000, 0x50A28C00},
    {0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380,
     0x78D0DF80, 0x4C1BF800, 0x5FE44380, 0x78D0DF80, 0x4C1BF800, 0x5FE44380},
    {0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800,
     0x47D66B00, 0x5A827980, 0x7208F800, 0x47D66B00, 0x5A827980, 0x7208F800},
    {0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80,
     0x556E0400, 0x6BA27E80, 0x43CE3E80, 0x556E0400, 0x6BA27E80, 0x43CE3E80}};

/*
 * Table: InverseQuantTableMant
 *
 * Description:   This table contains the mantissa values of the inverse quantization.
 *
 * Calculation:   for (q=0; q <= INV_QUANT_TABLESIZE; q++) {
 *
 *                  x_4_3 =  FDKpow( q, 4. / 3.);
 *
 *                  InverseQuantTableMant[q] = x_4_3 / FDKpow(2.0, ((INT)(FDKlog2(FDKfabs(x_4_3))) +
 * 1));
 *                }
 */
const FIXP_DBL InverseQuantTableMant[INV_QUANT_TABLESIZE + 1] = {
    (FIXP_DBL)0x00000000, (FIXP_DBL)0x40000000, (FIXP_DBL)0x50A28BE6, (FIXP_DBL)0x453A5CDB,
    (FIXP_DBL)0x6597FA95, (FIXP_DBL)0x44662758, (FIXP_DBL)0x5738C721, (FIXP_DBL)0x6B1FC80C,
    (FIXP_DBL)0x40000000, (FIXP_DBL)0x4AE20D72, (FIXP_DBL)0x562D6946, (FIXP_DBL)0x61DAE968,
    (FIXP_DBL)0x6DE47F4A, (FIXP_DBL)0x7A44F7A5, (FIXP_DBL)0x437BE656, (FIXP_DBL)0x49FC823C,
    (FIXP_DBL)0x50A28BE6, (FIXP_DBL)0x576C6F5A, (FIXP_DBL)0x5E58C0B0, (FIXP_DBL)0x65663614,
    (FIXP_DBL)0x6C93A2EB, (FIXP_DBL)0x73DFF3E7, (FIXP_DBL)0x7B4A2BC8, (FIXP_DBL)0x4168B054,
    (FIXP_DBL)0x453A5CDB, (FIXP_DBL)0x4919B6AA, (FIXP_DBL)0x4D065FB3, (FIXP_DBL)0x51000000,
    (FIXP_DBL)0x5506450E, (FIXP_DBL)0x5918E14F, (FIXP_DBL)0x5D378BAF, (FIXP_DBL)0x6161FF32,
    (FIXP_DBL)0x6597FA95, (FIXP_DBL)0x69D94001, (FIXP_DBL)0x6E2594C4, (FIXP_DBL)0x727CC10F,
    (FIXP_DBL)0x76DE8FC0, (FIXP_DBL)0x7B4ACE2D, (FIXP_DBL)0x7FC14BF8, (FIXP_DBL)0x4220ED72,
    (FIXP_DBL)0x44662758, (FIXP_DBL)0x46B03E7C, (FIXP_DBL)0x48FF1E87, (FIXP_DBL)0x4B52B3F3,
    (FIXP_DBL)0x4DAAEBFD, (FIXP_DBL)0x5007B497, (FIXP_DBL)0x5268FC62, (FIXP_DBL)0x54CEB29C,
    (FIXP_DBL)0x5738C721, (FIXP_DBL)0x59A72A59, (FIXP_DBL)0x5C19CD35, (FIXP_DBL)0x5E90A129,
    (FIXP_DBL)0x610B9821, (FIXP_DBL)0x638AA47F, (FIXP_DBL)0x660DB90F, (FIXP_DBL)0x6894C90B,
    (FIXP_DBL)0x6B1FC80C, (FIXP_DBL)0x6DAEAA0D, (FIXP_DBL)0x70416360, (FIXP_DBL)0x72D7E8B0,
    (FIXP_DBL)0x75722EF9, (FIXP_DBL)0x78102B85, (FIXP_DBL)0x7AB1D3EC, (FIXP_DBL)0x7D571E09,
    (FIXP_DBL)0x40000000, (FIXP_DBL)0x4156381B, (FIXP_DBL)0x42AE32A6, (FIXP_DBL)0x4407EB13,
    (FIXP_DBL)0x45635CEE, (FIXP_DBL)0x46C083E1, (FIXP_DBL)0x481F5BAF, (FIXP_DBL)0x497FE038,
    (FIXP_DBL)0x4AE20D72, (FIXP_DBL)0x4C45DF6B, (FIXP_DBL)0x4DAB524A, (FIXP_DBL)0x4F12624C,
    (FIXP_DBL)0x507B0BC1, (FIXP_DBL)0x51E54B11, (FIXP_DBL)0x53511CB5, (FIXP_DBL)0x54BE7D3C,
    (FIXP_DBL)0x562D6946, (FIXP_DBL)0x579DDD85, (FIXP_DBL)0x590FD6BE, (FIXP_DBL)0x5A8351C5,
    (FIXP_DBL)0x5BF84B7E, (FIXP_DBL)0x5D6EC0E0, (FIXP_DBL)0x5EE6AEEE, (FIXP_DBL)0x606012BA,
    (FIXP_DBL)0x61DAE968, (FIXP_DBL)0x63573025, (FIXP_DBL)0x64D4E42F, (FIXP_DBL)0x665402CF,
    (FIXP_DBL)0x67D4895D, (FIXP_DBL)0x6956753C, (FIXP_DBL)0x6AD9C3DA, (FIXP_DBL)0x6C5E72B2,
    (FIXP_DBL)0x6DE47F4A, (FIXP_DBL)0x6F6BE734, (FIXP_DBL)0x70F4A80B, (FIXP_DBL)0x727EBF76,
    (FIXP_DBL)0x740A2B25, (FIXP_DBL)0x7596E8D2, (FIXP_DBL)0x7724F642, (FIXP_DBL)0x78B45140,
    (FIXP_DBL)0x7A44F7A5, (FIXP_DBL)0x7BD6E74F, (FIXP_DBL)0x7D6A1E26, (FIXP_DBL)0x7EFE9A1A,
    (FIXP_DBL)0x404A2C92, (FIXP_DBL)0x4115ACA3, (FIXP_DBL)0x41E1CC43, (FIXP_DBL)0x42AE8A7B,
    (FIXP_DBL)0x437BE656, (FIXP_DBL)0x4449DEE4, (FIXP_DBL)0x45187338, (FIXP_DBL)0x45E7A268,
    (FIXP_DBL)0x46B76B8F, (FIXP_DBL)0x4787CDC8, (FIXP_DBL)0x4858C835, (FIXP_DBL)0x492A59FA,
    (FIXP_DBL)0x49FC823C, (FIXP_DBL)0x4ACF4026, (FIXP_DBL)0x4BA292E4, (FIXP_DBL)0x4C7679A6,
    (FIXP_DBL)0x4D4AF39D, (FIXP_DBL)0x4E200000, (FIXP_DBL)0x4EF59E06, (FIXP_DBL)0x4FCBCCE9,
    (FIXP_DBL)0x50A28BE6, (FIXP_DBL)0x5179DA3E, (FIXP_DBL)0x5251B732, (FIXP_DBL)0x532A2206,
    (FIXP_DBL)0x54031A02, (FIXP_DBL)0x54DC9E6F, (FIXP_DBL)0x55B6AE98, (FIXP_DBL)0x569149CC,
    (FIXP_DBL)0x576C6F5A, (FIXP_DBL)0x58481E94, (FIXP_DBL)0x592456CF, (FIXP_DBL)0x5A011761,
    (FIXP_DBL)0x5ADE5FA3, (FIXP_DBL)0x5BBC2EEE, (FIXP_DBL)0x5C9A84A0, (FIXP_DBL)0x5D796016,
    (FIXP_DBL)0x5E58C0B0, (FIXP_DBL)0x5F38A5D2, (FIXP_DBL)0x60190EDD, (FIXP_DBL)0x60F9FB39,
    (FIXP_DBL)0x61DB6A4D, (FIXP_DBL)0x62BD5B80, (FIXP_DBL)0x639FCE40, (FIXP_DBL)0x6482C1F7,
    (FIXP_DBL)0x65663614, (FIXP_DBL)0x664A2A06, (FIXP_DBL)0x672E9D3F, (FIXP_DBL)0x68138F32,
    (FIXP_DBL)0x68F8FF53, (FIXP_DBL)0x69DEED17, (FIXP_DBL)0x6AC557F7, (FIXP_DBL)0x6BAC3F6A,
    (FIXP_DBL)0x6C93A2EB, (FIXP_DBL)0x6D7B81F5, (FIXP_DBL)0x6E63DC06, (FIXP_DBL)0x6F4CB09B,
    (FIXP_DBL)0x7035FF34, (FIXP_DBL)0x711FC752, (FIXP_DBL)0x720A0878, (FIXP_DBL)0x72F4C228,
    (FIXP_DBL)0x73DFF3E7, (FIXP_DBL)0x74CB9D3C, (FIXP_DBL)0x75B7BDAD, (FIXP_DBL)0x76A454C2,
    (FIXP_DBL)0x77916206, (FIXP_DBL)0x787EE503, (FIXP_DBL)0x796CDD44, (FIXP_DBL)0x7A5B4A56,
    (FIXP_DBL)0x7B4A2BC8, (FIXP_DBL)0x7C398128, (FIXP_DBL)0x7D294A07, (FIXP_DBL)0x7E1985F5,
    (FIXP_DBL)0x7F0A3485, (FIXP_DBL)0x7FFB554A, (FIXP_DBL)0x407673EC, (FIXP_DBL)0x40EF75E3,
    (FIXP_DBL)0x4168B054, (FIXP_DBL)0x41E2230A, (FIXP_DBL)0x425BCDD3, (FIXP_DBL)0x42D5B07A,
    (FIXP_DBL)0x434FCACC, (FIXP_DBL)0x43CA1C98, (FIXP_DBL)0x4444A5AA, (FIXP_DBL)0x44BF65D1,
    (FIXP_DBL)0x453A5CDB, (FIXP_DBL)0x45B58A99, (FIXP_DBL)0x4630EED9, (FIXP_DBL)0x46AC896B,
    (FIXP_DBL)0x47285A21, (FIXP_DBL)0x47A460CA, (FIXP_DBL)0x48209D38, (FIXP_DBL)0x489D0F3C,
    (FIXP_DBL)0x4919B6AA, (FIXP_DBL)0x49969352, (FIXP_DBL)0x4A13A507, (FIXP_DBL)0x4A90EB9E,
    (FIXP_DBL)0x4B0E66E9, (FIXP_DBL)0x4B8C16BC, (FIXP_DBL)0x4C09FAEC, (FIXP_DBL)0x4C88134D,
    (FIXP_DBL)0x4D065FB3, (FIXP_DBL)0x4D84DFF5, (FIXP_DBL)0x4E0393E8, (FIXP_DBL)0x4E827B62,
    (FIXP_DBL)0x4F019639, (FIXP_DBL)0x4F80E443, (FIXP_DBL)0x50006558, (FIXP_DBL)0x5080194F,
    (FIXP_DBL)0x51000000, (FIXP_DBL)0x51801942, (FIXP_DBL)0x520064EE, (FIXP_DBL)0x5280E2DB,
    (FIXP_DBL)0x530192E4, (FIXP_DBL)0x538274E1, (FIXP_DBL)0x540388AB, (FIXP_DBL)0x5484CE1C,
    (FIXP_DBL)0x5506450E, (FIXP_DBL)0x5587ED5C, (FIXP_DBL)0x5609C6DF, (FIXP_DBL)0x568BD173,
    (FIXP_DBL)0x570E0CF3, (FIXP_DBL)0x5790793A, (FIXP_DBL)0x58131624, (FIXP_DBL)0x5895E38C,
    (FIXP_DBL)0x5918E14F, (FIXP_DBL)0x599C0F49, (FIXP_DBL)0x5A1F6D57, (FIXP_DBL)0x5AA2FB56,
    (FIXP_DBL)0x5B26B923, (FIXP_DBL)0x5BAAA69A, (FIXP_DBL)0x5C2EC39B, (FIXP_DBL)0x5CB31003,
    (FIXP_DBL)0x5D378BAF, (FIXP_DBL)0x5DBC367F, (FIXP_DBL)0x5E411051, (FIXP_DBL)0x5EC61904,
    (FIXP_DBL)0x5F4B5076, (FIXP_DBL)0x5FD0B687, (FIXP_DBL)0x60564B17, (FIXP_DBL)0x60DC0E06,
    (FIXP_DBL)0x6161FF32, (FIXP_DBL)0x61E81E7D, (FIXP_DBL)0x626E6BC7, (FIXP_DBL)0x62F4E6EF,
    (FIXP_DBL)0x637B8FD9, (FIXP_DBL)0x64026663, (FIXP_DBL)0x64896A6F, (FIXP_DBL)0x65109BDF,
    (FIXP_DBL)0x6597FA95, (FIXP_DBL)0x661F8672, (FIXP_DBL)0x66A73F57, (FIXP_DBL)0x672F2528,
    (FIXP_DBL)0x67B737C7, (FIXP_DBL)0x683F7716, (FIXP_DBL)0x68C7E2F8, (FIXP_DBL)0x69507B50,
    (FIXP_DBL)0x69D94001, (FIXP_DBL)0x6A6230EF, (FIXP_DBL)0x6AEB4DFC, (FIXP_DBL)0x6B74970D,
    (FIXP_DBL)0x6BFE0C05, (FIXP_DBL)0x6C87ACC9, (FIXP_DBL)0x6D11793D, (FIXP_DBL)0x6D9B7144,
    (FIXP_DBL)0x6E2594C4, (FIXP_DBL)0x6EAFE3A1, (FIXP_DBL)0x6F3A5DC1, (FIXP_DBL)0x6FC50307,
    (FIXP_DBL)0x704FD35A, (FIXP_DBL)0x70DACE9F, (FIXP_DBL)0x7165F4BB, (FIXP_DBL)0x71F14594,
    (FIXP_DBL)0x727CC10F, (FIXP_DBL)0x73086714, (FIXP_DBL)0x73943787, (FIXP_DBL)0x74203250,
    (FIXP_DBL)0x74AC5754, (FIXP_DBL)0x7538A67A, (FIXP_DBL)0x75C51FAA, (FIXP_DBL)0x7651C2CA,
    (FIXP_DBL)0x76DE8FC0, (FIXP_DBL)0x776B8675, (FIXP_DBL)0x77F8A6CF, (FIXP_DBL)0x7885F0B6,
    (FIXP_DBL)0x79136412, (FIXP_DBL)0x79A100CB, (FIXP_DBL)0x7A2EC6C7, (FIXP_DBL)0x7ABCB5F0,
    (FIXP_DBL)0x7B4ACE2D, (FIXP_DBL)0x7BD90F67, (FIXP_DBL)0x7C677987, (FIXP_DBL)0x7CF60C74,
    (FIXP_DBL)0x7D84C817, (FIXP_DBL)0x7E13AC5A, (FIXP_DBL)0x7EA2B925, (FIXP_DBL)0x7F31EE61,
    (FIXP_DBL)0x7FC14BF8, (FIXP_DBL)0x402868EA, (FIXP_DBL)0x40703FEE, (FIXP_DBL)0x40B82AFD,
    (FIXP_DBL)0x41002A0D, (FIXP_DBL)0x41483D12, (FIXP_DBL)0x41906401, (FIXP_DBL)0x41D89ECF,
    (FIXP_DBL)0x4220ED72, (FIXP_DBL)0x42694FDE, (FIXP_DBL)0x42B1C609, (FIXP_DBL)0x42FA4FE8,
    (FIXP_DBL)0x4342ED70, (FIXP_DBL)0x438B9E96, (FIXP_DBL)0x43D46351, (FIXP_DBL)0x441D3B95,
    (FIXP_DBL)0x44662758, (FIXP_DBL)0x44AF2690, (FIXP_DBL)0x44F83933, (FIXP_DBL)0x45415F35,
    (FIXP_DBL)0x458A988D, (FIXP_DBL)0x45D3E531, (FIXP_DBL)0x461D4516, (FIXP_DBL)0x4666B832,
    (FIXP_DBL)0x46B03E7C, (FIXP_DBL)0x46F9D7E9, (FIXP_DBL)0x47438470, (FIXP_DBL)0x478D4406,
    (FIXP_DBL)0x47D716A1, (FIXP_DBL)0x4820FC39, (FIXP_DBL)0x486AF4C3, (FIXP_DBL)0x48B50035,
    (FIXP_DBL)0x48FF1E87, (FIXP_DBL)0x49494FAD, (FIXP_DBL)0x4993939F, (FIXP_DBL)0x49DDEA54,
    (FIXP_DBL)0x4A2853C1, (FIXP_DBL)0x4A72CFDE, (FIXP_DBL)0x4ABD5EA1, (FIXP_DBL)0x4B080000,
    (FIXP_DBL)0x4B52B3F3, (FIXP_DBL)0x4B9D7A70, (FIXP_DBL)0x4BE8536E, (FIXP_DBL)0x4C333EE4,
    (FIXP_DBL)0x4C7E3CC9, (FIXP_DBL)0x4CC94D14, (FIXP_DBL)0x4D146FBB, (FIXP_DBL)0x4D5FA4B6,
    (FIXP_DBL)0x4DAAEBFD, (FIXP_DBL)0x4DF64585, (FIXP_DBL)0x4E41B146, (FIXP_DBL)0x4E8D2F38,
    (FIXP_DBL)0x4ED8BF52, (FIXP_DBL)0x4F24618A, (FIXP_DBL)0x4F7015D9, (FIXP_DBL)0x4FBBDC36,
    (FIXP_DBL)0x5007B497, (FIXP_DBL)0x50539EF5, (FIXP_DBL)0x509F9B48, (FIXP_DBL)0x50EBA985,
    (FIXP_DBL)0x5137C9A6, (FIXP_DBL)0x5183FBA2, (FIXP_DBL)0x51D03F70, (FIXP_DBL)0x521C9508,
    (FIXP_DBL)0x5268FC62, (FIXP_DBL)0x52B57575, (FIXP_DBL)0x5302003A, (FIXP_DBL)0x534E9CA8,
    (FIXP_DBL)0x539B4AB7, (FIXP_DBL)0x53E80A5F, (FIXP_DBL)0x5434DB98, (FIXP_DBL)0x5481BE5A,
    (FIXP_DBL)0x54CEB29C, (FIXP_DBL)0x551BB858, (FIXP_DBL)0x5568CF85, (FIXP_DBL)0x55B5F81B,
    (FIXP_DBL)0x56033212, (FIXP_DBL)0x56507D63, (FIXP_DBL)0x569DDA05, (FIXP_DBL)0x56EB47F2,
    (FIXP_DBL)0x5738C721, (FIXP_DBL)0x5786578A, (FIXP_DBL)0x57D3F927, (FIXP_DBL)0x5821ABEF,
    (FIXP_DBL)0x586F6FDA, (FIXP_DBL)0x58BD44E2, (FIXP_DBL)0x590B2AFF, (FIXP_DBL)0x59592229,
    (FIXP_DBL)0x59A72A59, (FIXP_DBL)0x59F54387, (FIXP_DBL)0x5A436DAC, (FIXP_DBL)0x5A91A8C1,
    (FIXP_DBL)0x5ADFF4BE, (FIXP_DBL)0x5B2E519C, (FIXP_DBL)0x5B7CBF54, (FIXP_DBL)0x5BCB3DDF,
    (FIXP_DBL)0x5C19CD35, (FIXP_DBL)0x5C686D4F, (FIXP_DBL)0x5CB71E27, (FIXP_DBL)0x5D05DFB4,
    (FIXP_DBL)0x5D54B1F0, (FIXP_DBL)0x5DA394D4, (FIXP_DBL)0x5DF28859, (FIXP_DBL)0x5E418C78,
    (FIXP_DBL)0x5E90A129, (FIXP_DBL)0x5EDFC667, (FIXP_DBL)0x5F2EFC29, (FIXP_DBL)0x5F7E426A,
    (FIXP_DBL)0x5FCD9921, (FIXP_DBL)0x601D004A, (FIXP_DBL)0x606C77DC, (FIXP_DBL)0x60BBFFD0,
    (FIXP_DBL)0x610B9821, (FIXP_DBL)0x615B40C8, (FIXP_DBL)0x61AAF9BD, (FIXP_DBL)0x61FAC2FA,
    (FIXP_DBL)0x624A9C79, (FIXP_DBL)0x629A8633, (FIXP_DBL)0x62EA8020, (FIXP_DBL)0x633A8A3C,
    (FIXP_DBL)0x638AA47F, (FIXP_DBL)0x63DACEE2, (FIXP_DBL)0x642B0960, (FIXP_DBL)0x647B53F1,
    (FIXP_DBL)0x64CBAE8F, (FIXP_DBL)0x651C1935, (FIXP_DBL)0x656C93DB, (FIXP_DBL)0x65BD1E7B,
    (FIXP_DBL)0x660DB90F, (FIXP_DBL)0x665E6391, (FIXP_DBL)0x66AF1DFA, (FIXP_DBL)0x66FFE844,
    (FIXP_DBL)0x6750C268, (FIXP_DBL)0x67A1AC62, (FIXP_DBL)0x67F2A629, (FIXP_DBL)0x6843AFB9,
    (FIXP_DBL)0x6894C90B, (FIXP_DBL)0x68E5F219, (FIXP_DBL)0x69372ADD, (FIXP_DBL)0x69887350,
    (FIXP_DBL)0x69D9CB6D, (FIXP_DBL)0x6A2B332F, (FIXP_DBL)0x6A7CAA8D, (FIXP_DBL)0x6ACE3184,
    (FIXP_DBL)0x6B1FC80C, (FIXP_DBL)0x6B716E20, (FIXP_DBL)0x6BC323BB, (FIXP_DBL)0x6C14E8D5,
    (FIXP_DBL)0x6C66BD69, (FIXP_DBL)0x6CB8A172, (FIXP_DBL)0x6D0A94E9, (FIXP_DBL)0x6D5C97CA,
    (FIXP_DBL)0x6DAEAA0D, (FIXP_DBL)0x6E00CBAD, (FIXP_DBL)0x6E52FCA4, (FIXP_DBL)0x6EA53CEE,
    (FIXP_DBL)0x6EF78C83, (FIXP_DBL)0x6F49EB5F, (FIXP_DBL)0x6F9C597B, (FIXP_DBL)0x6FEED6D3,
    (FIXP_DBL)0x70416360, (FIXP_DBL)0x7093FF1D, (FIXP_DBL)0x70E6AA04, (FIXP_DBL)0x7139640F,
    (FIXP_DBL)0x718C2D3A, (FIXP_DBL)0x71DF057F, (FIXP_DBL)0x7231ECD8, (FIXP_DBL)0x7284E33F,
    (FIXP_DBL)0x72D7E8B0, (FIXP_DBL)0x732AFD24, (FIXP_DBL)0x737E2097, (FIXP_DBL)0x73D15303,
    (FIXP_DBL)0x74249462, (FIXP_DBL)0x7477E4B0, (FIXP_DBL)0x74CB43E6, (FIXP_DBL)0x751EB201,
    (FIXP_DBL)0x75722EF9, (FIXP_DBL)0x75C5BACA, (FIXP_DBL)0x7619556F, (FIXP_DBL)0x766CFEE2,
    (FIXP_DBL)0x76C0B71F, (FIXP_DBL)0x77147E20, (FIXP_DBL)0x776853DF, (FIXP_DBL)0x77BC3858,
    (FIXP_DBL)0x78102B85, (FIXP_DBL)0x78642D62, (FIXP_DBL)0x78B83DE9, (FIXP_DBL)0x790C5D15,
    (FIXP_DBL)0x79608AE1, (FIXP_DBL)0x79B4C748, (FIXP_DBL)0x7A091245, (FIXP_DBL)0x7A5D6BD2,
    (FIXP_DBL)0x7AB1D3EC, (FIXP_DBL)0x7B064A8C, (FIXP_DBL)0x7B5ACFAE, (FIXP_DBL)0x7BAF634C,
    (FIXP_DBL)0x7C040563, (FIXP_DBL)0x7C58B5EC, (FIXP_DBL)0x7CAD74E4, (FIXP_DBL)0x7D024244,
    (FIXP_DBL)0x7D571E09, (FIXP_DBL)0x7DAC082D, (FIXP_DBL)0x7E0100AC, (FIXP_DBL)0x7E560780,
    (FIXP_DBL)0x7EAB1CA5, (FIXP_DBL)0x7F004015, (FIXP_DBL)0x7F5571CD, (FIXP_DBL)0x7FAAB1C8,
    (FIXP_DBL)0x40000000, (FIXP_DBL)0x402AAE38, (FIXP_DBL)0x4055638B, (FIXP_DBL)0x40801FF5,
    (FIXP_DBL)0x40AAE375, (FIXP_DBL)0x40D5AE08, (FIXP_DBL)0x41007FAB, (FIXP_DBL)0x412B585D,
    (FIXP_DBL)0x4156381B, (FIXP_DBL)0x41811EE2, (FIXP_DBL)0x41AC0CB1, (FIXP_DBL)0x41D70185,
    (FIXP_DBL)0x4201FD5C, (FIXP_DBL)0x422D0033, (FIXP_DBL)0x42580A09, (FIXP_DBL)0x42831ADB,
    (FIXP_DBL)0x42AE32A6, (FIXP_DBL)0x42D95169, (FIXP_DBL)0x43047721, (FIXP_DBL)0x432FA3CC,
    (FIXP_DBL)0x435AD768, (FIXP_DBL)0x438611F3, (FIXP_DBL)0x43B15369, (FIXP_DBL)0x43DC9BCA,
    (FIXP_DBL)0x4407EB13, (FIXP_DBL)0x44334141, (FIXP_DBL)0x445E9E53, (FIXP_DBL)0x448A0246,
    (FIXP_DBL)0x44B56D19, (FIXP_DBL)0x44E0DEC8, (FIXP_DBL)0x450C5752, (FIXP_DBL)0x4537D6B5,
    (FIXP_DBL)0x45635CEE, (FIXP_DBL)0x458EE9FB, (FIXP_DBL)0x45BA7DDB, (FIXP_DBL)0x45E6188B,
    (FIXP_DBL)0x4611BA09, (FIXP_DBL)0x463D6252, (FIXP_DBL)0x46691165, (FIXP_DBL)0x4694C740,
    (FIXP_DBL)0x46C083E1, (FIXP_DBL)0x46EC4744, (FIXP_DBL)0x47181169, (FIXP_DBL)0x4743E24E,
    (FIXP_DBL)0x476FB9EF, (FIXP_DBL)0x479B984C, (FIXP_DBL)0x47C77D61, (FIXP_DBL)0x47F3692E,
    (FIXP_DBL)0x481F5BAF, (FIXP_DBL)0x484B54E4, (FIXP_DBL)0x487754C9, (FIXP_DBL)0x48A35B5D,
    (FIXP_DBL)0x48CF689D, (FIXP_DBL)0x48FB7C89, (FIXP_DBL)0x4927971D, (FIXP_DBL)0x4953B858,
    (FIXP_DBL)0x497FE038, (FIXP_DBL)0x49AC0EBA, (FIXP_DBL)0x49D843DE, (FIXP_DBL)0x4A047F9F,
    (FIXP_DBL)0x4A30C1FE, (FIXP_DBL)0x4A5D0AF8, (FIXP_DBL)0x4A895A8A, (FIXP_DBL)0x4AB5B0B3,
    (FIXP_DBL)0x4AE20D72, (FIXP_DBL)0x4B0E70C3, (FIXP_DBL)0x4B3ADAA5, (FIXP_DBL)0x4B674B16,
    (FIXP_DBL)0x4B93C214, (FIXP_DBL)0x4BC03F9E, (FIXP_DBL)0x4BECC3B1, (FIXP_DBL)0x4C194E4B,
    (FIXP_DBL)0x4C45DF6B, (FIXP_DBL)0x4C72770E, (FIXP_DBL)0x4C9F1533, (FIXP_DBL)0x4CCBB9D8,
    (FIXP_DBL)0x4CF864FB, (FIXP_DBL)0x4D251699, (FIXP_DBL)0x4D51CEB2, (FIXP_DBL)0x4D7E8D43,
    (FIXP_DBL)0x4DAB524A, (FIXP_DBL)0x4DD81DC6, (FIXP_DBL)0x4E04EFB5, (FIXP_DBL)0x4E31C814,
    (FIXP_DBL)0x4E5EA6E2, (FIXP_DBL)0x4E8B8C1D, (FIXP_DBL)0x4EB877C4, (FIXP_DBL)0x4EE569D4,
    (FIXP_DBL)0x4F12624C, (FIXP_DBL)0x4F3F6129, (FIXP_DBL)0x4F6C666A, (FIXP_DBL)0x4F99720E,
    (FIXP_DBL)0x4FC68412, (FIXP_DBL)0x4FF39C74, (FIXP_DBL)0x5020BB34, (FIXP_DBL)0x504DE04E,
    (FIXP_DBL)0x507B0BC1, (FIXP_DBL)0x50A83D8C, (FIXP_DBL)0x50D575AC, (FIXP_DBL)0x5102B420,
    (FIXP_DBL)0x512FF8E6, (FIXP_DBL)0x515D43FD, (FIXP_DBL)0x518A9562, (FIXP_DBL)0x51B7ED14,
    (FIXP_DBL)0x51E54B11, (FIXP_DBL)0x5212AF57, (FIXP_DBL)0x524019E5, (FIXP_DBL)0x526D8AB8,
    (FIXP_DBL)0x529B01D0, (FIXP_DBL)0x52C87F2A, (FIXP_DBL)0x52F602C5, (FIXP_DBL)0x53238C9E,
    (FIXP_DBL)0x53511CB5, (FIXP_DBL)0x537EB308, (FIXP_DBL)0x53AC4F94, (FIXP_DBL)0x53D9F258,
    (FIXP_DBL)0x54079B53, (FIXP_DBL)0x54354A82, (FIXP_DBL)0x5462FFE5, (FIXP_DBL)0x5490BB79,
    (FIXP_DBL)0x54BE7D3C, (FIXP_DBL)0x54EC452E, (FIXP_DBL)0x551A134C, (FIXP_DBL)0x5547E794,
    (FIXP_DBL)0x5575C206, (FIXP_DBL)0x55A3A29F, (FIXP_DBL)0x55D1895E, (FIXP_DBL)0x55FF7641,
    (FIXP_DBL)0x562D6946, (FIXP_DBL)0x565B626C, (FIXP_DBL)0x568961B2, (FIXP_DBL)0x56B76714,
    (FIXP_DBL)0x56E57293, (FIXP_DBL)0x5713842C, (FIXP_DBL)0x57419BDE, (FIXP_DBL)0x576FB9A7,
    (FIXP_DBL)0x579DDD85, (FIXP_DBL)0x57CC0778, (FIXP_DBL)0x57FA377C, (FIXP_DBL)0x58286D91,
    (FIXP_DBL)0x5856A9B6, (FIXP_DBL)0x5884EBE7, (FIXP_DBL)0x58B33425, (FIXP_DBL)0x58E1826D,
    (FIXP_DBL)0x590FD6BE, (FIXP_DBL)0x593E3116, (FIXP_DBL)0x596C9174, (FIXP_DBL)0x599AF7D5,
    (FIXP_DBL)0x59C9643A, (FIXP_DBL)0x59F7D69F, (FIXP_DBL)0x5A264F03, (FIXP_DBL)0x5A54CD66,
    (FIXP_DBL)0x5A8351C5, (FIXP_DBL)0x5AB1DC1E, (FIXP_DBL)0x5AE06C71, (FIXP_DBL)0x5B0F02BB,
    (FIXP_DBL)0x5B3D9EFC, (FIXP_DBL)0x5B6C4131, (FIXP_DBL)0x5B9AE95A, (FIXP_DBL)0x5BC99774,
    (FIXP_DBL)0x5BF84B7E, (FIXP_DBL)0x5C270577, (FIXP_DBL)0x5C55C55D, (FIXP_DBL)0x5C848B2F,
    (FIXP_DBL)0x5CB356EA, (FIXP_DBL)0x5CE2288E, (FIXP_DBL)0x5D11001A, (FIXP_DBL)0x5D3FDD8B,
    (FIXP_DBL)0x5D6EC0E0, (FIXP_DBL)0x5D9DAA18, (FIXP_DBL)0x5DCC9931, (FIXP_DBL)0x5DFB8E29,
    (FIXP_DBL)0x5E2A8900, (FIXP_DBL)0x5E5989B4, (FIXP_DBL)0x5E889043, (FIXP_DBL)0x5EB79CAC,
    (FIXP_DBL)0x5EE6AEEE, (FIXP_DBL)0x5F15C706, (FIXP_DBL)0x5F44E4F4, (FIXP_DBL)0x5F7408B6,
    (FIXP_DBL)0x5FA3324A, (FIXP_DBL)0x5FD261B0, (FIXP_DBL)0x600196E6, (FIXP_DBL)0x6030D1EA,
    (FIXP_DBL)0x606012BA, (FIXP_DBL)0x608F5957, (FIXP_DBL)0x60BEA5BD, (FIXP_DBL)0x60EDF7EC,
    (FIXP_DBL)0x611D4FE2, (FIXP_DBL)0x614CAD9F, (FIXP_DBL)0x617C111F, (FIXP_DBL)0x61AB7A63,
    (FIXP_DBL)0x61DAE968, (FIXP_DBL)0x620A5E2D, (FIXP_DBL)0x6239D8B1, (FIXP_DBL)0x626958F3,
    (FIXP_DBL)0x6298DEF1, (FIXP_DBL)0x62C86AA9, (FIXP_DBL)0x62F7FC1B, (FIXP_DBL)0x63279345,
    (FIXP_DBL)0x63573025, (FIXP_DBL)0x6386D2BA, (FIXP_DBL)0x63B67B04, (FIXP_DBL)0x63E628FF,
    (FIXP_DBL)0x6415DCAC, (FIXP_DBL)0x64459609, (FIXP_DBL)0x64755513, (FIXP_DBL)0x64A519CB,
    (FIXP_DBL)0x64D4E42F, (FIXP_DBL)0x6504B43D, (FIXP_DBL)0x653489F4, (FIXP_DBL)0x65646552,
    (FIXP_DBL)0x65944657, (FIXP_DBL)0x65C42D01, (FIXP_DBL)0x65F4194F, (FIXP_DBL)0x66240B3F,
    (FIXP_DBL)0x665402CF, (FIXP_DBL)0x66840000, (FIXP_DBL)0x66B402CF, (FIXP_DBL)0x66E40B3B,
    (FIXP_DBL)0x67141943, (FIXP_DBL)0x67442CE5, (FIXP_DBL)0x67744620, (FIXP_DBL)0x67A464F4,
    (FIXP_DBL)0x67D4895D, (FIXP_DBL)0x6804B35C, (FIXP_DBL)0x6834E2EF, (FIXP_DBL)0x68651815,
    (FIXP_DBL)0x689552CC, (FIXP_DBL)0x68C59313, (FIXP_DBL)0x68F5D8E9, (FIXP_DBL)0x6926244C,
    (FIXP_DBL)0x6956753C, (FIXP_DBL)0x6986CBB6, (FIXP_DBL)0x69B727BB, (FIXP_DBL)0x69E78947,
    (FIXP_DBL)0x6A17F05B, (FIXP_DBL)0x6A485CF5, (FIXP_DBL)0x6A78CF14, (FIXP_DBL)0x6AA946B5,
    (FIXP_DBL)0x6AD9C3DA, (FIXP_DBL)0x6B0A467E, (FIXP_DBL)0x6B3ACEA3, (FIXP_DBL)0x6B6B5C46,
    (FIXP_DBL)0x6B9BEF66, (FIXP_DBL)0x6BCC8802, (FIXP_DBL)0x6BFD2619, (FIXP_DBL)0x6C2DC9A9,
    (FIXP_DBL)0x6C5E72B2, (FIXP_DBL)0x6C8F2131, (FIXP_DBL)0x6CBFD526, (FIXP_DBL)0x6CF08E90,
    (FIXP_DBL)0x6D214D6D, (FIXP_DBL)0x6D5211BC, (FIXP_DBL)0x6D82DB7C, (FIXP_DBL)0x6DB3AAAC,
    (FIXP_DBL)0x6DE47F4A, (FIXP_DBL)0x6E155956, (FIXP_DBL)0x6E4638CD, (FIXP_DBL)0x6E771DAF,
    (FIXP_DBL)0x6EA807FB, (FIXP_DBL)0x6ED8F7B0, (FIXP_DBL)0x6F09ECCC, (FIXP_DBL)0x6F3AE74D,
    (FIXP_DBL)0x6F6BE734, (FIXP_DBL)0x6F9CEC7E, (FIXP_DBL)0x6FCDF72B, (FIXP_DBL)0x6FFF073A,
    (FIXP_DBL)0x70301CA8, (FIXP_DBL)0x70613775, (FIXP_DBL)0x709257A0, (FIXP_DBL)0x70C37D28,
    (FIXP_DBL)0x70F4A80B, (FIXP_DBL)0x7125D849, (FIXP_DBL)0x71570DE0, (FIXP_DBL)0x718848CE,
    (FIXP_DBL)0x71B98914, (FIXP_DBL)0x71EACEAF, (FIXP_DBL)0x721C199E, (FIXP_DBL)0x724D69E1,
    (FIXP_DBL)0x727EBF76, (FIXP_DBL)0x72B01A5C, (FIXP_DBL)0x72E17A92, (FIXP_DBL)0x7312E017,
    (FIXP_DBL)0x73444AEA, (FIXP_DBL)0x7375BB09, (FIXP_DBL)0x73A73073, (FIXP_DBL)0x73D8AB28,
    (FIXP_DBL)0x740A2B25, (FIXP_DBL)0x743BB06B, (FIXP_DBL)0x746D3AF7, (FIXP_DBL)0x749ECAC9,
    (FIXP_DBL)0x74D05FE0, (FIXP_DBL)0x7501FA3A, (FIXP_DBL)0x753399D7, (FIXP_DBL)0x75653EB4,
    (FIXP_DBL)0x7596E8D2, (FIXP_DBL)0x75C8982F, (FIXP_DBL)0x75FA4CCA, (FIXP_DBL)0x762C06A2,
    (FIXP_DBL)0x765DC5B5, (FIXP_DBL)0x768F8A03, (FIXP_DBL)0x76C1538B, (FIXP_DBL)0x76F3224A,
    (FIXP_DBL)0x7724F642, (FIXP_DBL)0x7756CF6F, (FIXP_DBL)0x7788ADD2, (FIXP_DBL)0x77BA9168,
    (FIXP_DBL)0x77EC7A32, (FIXP_DBL)0x781E682D, (FIXP_DBL)0x78505B5A, (FIXP_DBL)0x788253B6,
    (FIXP_DBL)0x78B45140, (FIXP_DBL)0x78E653F9, (FIXP_DBL)0x79185BDD, (FIXP_DBL)0x794A68EE,
    (FIXP_DBL)0x797C7B28, (FIXP_DBL)0x79AE928C, (FIXP_DBL)0x79E0AF18, (FIXP_DBL)0x7A12D0CC,
    (FIXP_DBL)0x7A44F7A5, (FIXP_DBL)0x7A7723A4, (FIXP_DBL)0x7AA954C6, (FIXP_DBL)0x7ADB8B0C,
    (FIXP_DBL)0x7B0DC673, (FIXP_DBL)0x7B4006FB, (FIXP_DBL)0x7B724CA3, (FIXP_DBL)0x7BA4976A,
    (FIXP_DBL)0x7BD6E74F, (FIXP_DBL)0x7C093C50, (FIXP_DBL)0x7C3B966D, (FIXP_DBL)0x7C6DF5A5,
    (FIXP_DBL)0x7CA059F6, (FIXP_DBL)0x7CD2C360, (FIXP_DBL)0x7D0531E1, (FIXP_DBL)0x7D37A579,
    (FIXP_DBL)0x7D6A1E26, (FIXP_DBL)0x7D9C9BE7, (FIXP_DBL)0x7DCF1EBD, (FIXP_DBL)0x7E01A6A4,
    (FIXP_DBL)0x7E34339D, (FIXP_DBL)0x7E66C5A6, (FIXP_DBL)0x7E995CBF, (FIXP_DBL)0x7ECBF8E6,
    (FIXP_DBL)0x7EFE9A1A, (FIXP_DBL)0x7F31405B, (FIXP_DBL)0x7F63EBA7, (FIXP_DBL)0x7F969BFD,
    (FIXP_DBL)0x7FC9515D, (FIXP_DBL)0x7FFC0BC5, (FIXP_DBL)0x4017659A, (FIXP_DBL)0x4030C7D5,
    (FIXP_DBL)0x404A2C92, (FIXP_DBL)0x406393D2, (FIXP_DBL)0x407CFD93, (FIXP_DBL)0x409669D6,
    (FIXP_DBL)0x40AFD899, (FIXP_DBL)0x40C949DC, (FIXP_DBL)0x40E2BD9F, (FIXP_DBL)0x40FC33E2,
    (FIXP_DBL)0x4115ACA3, (FIXP_DBL)0x412F27E2, (FIXP_DBL)0x4148A59F, (FIXP_DBL)0x416225D9,
    (FIXP_DBL)0x417BA891, (FIXP_DBL)0x41952DC4, (FIXP_DBL)0x41AEB573, (FIXP_DBL)0x41C83F9E,
    (FIXP_DBL)0x41E1CC43, (FIXP_DBL)0x41FB5B63, (FIXP_DBL)0x4214ECFC, (FIXP_DBL)0x422E810F,
    (FIXP_DBL)0x4248179B, (FIXP_DBL)0x4261B0A0, (FIXP_DBL)0x427B4C1C, (FIXP_DBL)0x4294EA10,
    (FIXP_DBL)0x42AE8A7B, (FIXP_DBL)0x42C82D5C, (FIXP_DBL)0x42E1D2B4, (FIXP_DBL)0x42FB7A81,
    (FIXP_DBL)0x431524C3, (FIXP_DBL)0x432ED17A, (FIXP_DBL)0x434880A5, (FIXP_DBL)0x43623244,
    (FIXP_DBL)0x437BE656, (FIXP_DBL)0x43959CDB, (FIXP_DBL)0x43AF55D2, (FIXP_DBL)0x43C9113B,
    (FIXP_DBL)0x43E2CF16, (FIXP_DBL)0x43FC8F61, (FIXP_DBL)0x4416521D, (FIXP_DBL)0x44301749,
    (FIXP_DBL)0x4449DEE4, (FIXP_DBL)0x4463A8EF, (FIXP_DBL)0x447D7568, (FIXP_DBL)0x4497444F,
    (FIXP_DBL)0x44B115A4, (FIXP_DBL)0x44CAE966, (FIXP_DBL)0x44E4BF95, (FIXP_DBL)0x44FE9831,
    (FIXP_DBL)0x45187338, (FIXP_DBL)0x453250AB, (FIXP_DBL)0x454C3088, (FIXP_DBL)0x456612D1,
    (FIXP_DBL)0x457FF783, (FIXP_DBL)0x4599DE9F, (FIXP_DBL)0x45B3C824, (FIXP_DBL)0x45CDB412,
    (FIXP_DBL)0x45E7A268, (FIXP_DBL)0x46019326, (FIXP_DBL)0x461B864C, (FIXP_DBL)0x46357BD8,
    (FIXP_DBL)0x464F73CB, (FIXP_DBL)0x46696E24, (FIXP_DBL)0x46836AE2, (FIXP_DBL)0x469D6A06,
    (FIXP_DBL)0x46B76B8F, (FIXP_DBL)0x46D16F7B, (FIXP_DBL)0x46EB75CC, (FIXP_DBL)0x47057E80,
    (FIXP_DBL)0x471F8997, (FIXP_DBL)0x47399711, (FIXP_DBL)0x4753A6EC, (FIXP_DBL)0x476DB92A,
    (FIXP_DBL)0x4787CDC8, (FIXP_DBL)0x47A1E4C8, (FIXP_DBL)0x47BBFE27, (FIXP_DBL)0x47D619E7,
    (FIXP_DBL)0x47F03806, (FIXP_DBL)0x480A5884, (FIXP_DBL)0x48247B61, (FIXP_DBL)0x483EA09C,
    (FIXP_DBL)0x4858C835, (FIXP_DBL)0x4872F22C, (FIXP_DBL)0x488D1E7F, (FIXP_DBL)0x48A74D2F,
    (FIXP_DBL)0x48C17E3A, (FIXP_DBL)0x48DBB1A2, (FIXP_DBL)0x48F5E765, (FIXP_DBL)0x49101F82,
    (FIXP_DBL)0x492A59FA, (FIXP_DBL)0x494496CC, (FIXP_DBL)0x495ED5F7, (FIXP_DBL)0x4979177C,
    (FIXP_DBL)0x49935B59, (FIXP_DBL)0x49ADA18E, (FIXP_DBL)0x49C7EA1C, (FIXP_DBL)0x49E23500,
    (FIXP_DBL)0x49FC823C, (FIXP_DBL)0x4A16D1CF, (FIXP_DBL)0x4A3123B7, (FIXP_DBL)0x4A4B77F6,
    (FIXP_DBL)0x4A65CE89, (FIXP_DBL)0x4A802772, (FIXP_DBL)0x4A9A82AF, (FIXP_DBL)0x4AB4E041,
    (FIXP_DBL)0x4ACF4026, (FIXP_DBL)0x4AE9A25E, (FIXP_DBL)0x4B0406EA, (FIXP_DBL)0x4B1E6DC8,
    (FIXP_DBL)0x4B38D6F8, (FIXP_DBL)0x4B534279, (FIXP_DBL)0x4B6DB04C, (FIXP_DBL)0x4B882070,
    (FIXP_DBL)0x4BA292E4, (FIXP_DBL)0x4BBD07A8, (FIXP_DBL)0x4BD77EBC, (FIXP_DBL)0x4BF1F81F,
    (FIXP_DBL)0x4C0C73D1, (FIXP_DBL)0x4C26F1D2, (FIXP_DBL)0x4C417220, (FIXP_DBL)0x4C5BF4BC,
    (FIXP_DBL)0x4C7679A6, (FIXP_DBL)0x4C9100DC, (FIXP_DBL)0x4CAB8A5E, (FIXP_DBL)0x4CC6162D,
    (FIXP_DBL)0x4CE0A447, (FIXP_DBL)0x4CFB34AD, (FIXP_DBL)0x4D15C75D, (FIXP_DBL)0x4D305C58,
    (FIXP_DBL)0x4D4AF39D, (FIXP_DBL)0x4D658D2C, (FIXP_DBL)0x4D802904, (FIXP_DBL)0x4D9AC725,
    (FIXP_DBL)0x4DB5678E, (FIXP_DBL)0x4DD00A3F, (FIXP_DBL)0x4DEAAF38, (FIXP_DBL)0x4E055679,
    (FIXP_DBL)0x4E200000, (FIXP_DBL)0x4E3AABCE, (FIXP_DBL)0x4E5559E2, (FIXP_DBL)0x4E700A3C,
    (FIXP_DBL)0x4E8ABCDB, (FIXP_DBL)0x4EA571BF, (FIXP_DBL)0x4EC028E8, (FIXP_DBL)0x4EDAE255,
    (FIXP_DBL)0x4EF59E06, (FIXP_DBL)0x4F105BFA, (FIXP_DBL)0x4F2B1C31, (FIXP_DBL)0x4F45DEAB,
    (FIXP_DBL)0x4F60A368, (FIXP_DBL)0x4F7B6A66, (FIXP_DBL)0x4F9633A6, (FIXP_DBL)0x4FB0FF27,
    (FIXP_DBL)0x4FCBCCE9, (FIXP_DBL)0x4FE69CEB, (FIXP_DBL)0x50016F2D, (FIXP_DBL)0x501C43AF,
    (FIXP_DBL)0x50371A70, (FIXP_DBL)0x5051F370, (FIXP_DBL)0x506CCEAF, (FIXP_DBL)0x5087AC2C,
    (FIXP_DBL)0x50A28BE6};

/*
 * Table: InverseQuantTableExp
 *
 * Description:  This table contains the exponents of the values in table InverseQuantTableMant.
 *
 * Calculation:  for (q=0; q <= INV_QUANT_TABLESIZE; q++) {
 *
 *                 x_4_3 =  FDKpow( q, 4. / 3.);
 *
 *                 InverseQuantTableExp[q] = (INT)(FDKlog2(FDKfabs(x_4_3))) + 1;
 *               }
 */
const UCHAR InverseQuantTableExp[INV_QUANT_TABLESIZE + 1] = {
    0,  1,  2,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,
    7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,
    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14};

/*
 * Table: InverseQuantInterpolationTable
 *
 * Description:  This table is used for determining an intermediate
 *               value between two explicitly given values.
 */
const FIXP_DBL InverseQuantInterpolationTable[8] = {
    (FIXP_DBL)0x00000000, (FIXP_DBL)0x10000000, (FIXP_DBL)0x20000000, (FIXP_DBL)0x30000000,
    (FIXP_DBL)0x40000000, (FIXP_DBL)0x50000000, (FIXP_DBL)0x60000000, (FIXP_DBL)0x70000000};

/*
 * Table: a2ToPow0p25Mant
 *
 * Description:  This table contains the mantissa of the gain values 2^(0.25*(sf%4))
 *               The gain values are scaled by a2ToPow0p25Exp
 *
 * Calculation:  for (sf=0; sf < 4; sf++) {
 *                 a2ToPow0p25Mant[sf] = FL2FXCONST_DBL(FDKpow(2.0, 0.25 * sf) /
 * (float)(1<<a2ToPow0p25Exp));
 *               }
 */
const FIXP_DBL a2ToPow0p25Mant[4] = {(FIXP_DBL)0x40000000, (FIXP_DBL)0x4C1BF829,
                                     (FIXP_DBL)0x5A82799A, (FIXP_DBL)0x6BA27E65};

/* Exponent of gain values in table a2ToPow0p25Mant */
const INT a2ToPow0p25Exp = 1;

/* Exponent of table InverseQuantTableMant when it is used for interpolation */
const INT InverseQuantInterpolationExp = 4;

/* 41 scfbands */
static const SHORT sfb_96_1024[42] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,
                                      44,  48,  52,  56,  64,  72,  80,  88,  96,  108, 120,
                                      132, 144, 156, 172, 188, 212, 240, 276, 320, 384, 448,
                                      512, 576, 640, 704, 768, 832, 896, 960, 1024};
/* 12 scfbands */
static const SHORT sfb_96_128[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128};

/* 47 scfbands*/
static const SHORT sfb_64_1024[48] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,
                                      48,  52,  56,  64,  72,  80,  88,  100, 112, 124, 140, 156,
                                      172, 192, 216, 240, 268, 304, 344, 384, 424, 464, 504, 544,
                                      584, 624, 664, 704, 744, 784, 824, 864, 904, 944, 984, 1024};

/* 12 scfbands */
static const SHORT sfb_64_128[13] = {0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128};

/* 49 scfbands */
static const SHORT sfb_48_1024[50] = {
    0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,  64,  72,  80,  88,
    96,  108, 120, 132, 144, 160, 176, 196, 216, 240, 264, 292, 320, 352, 384, 416, 448,
    480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 1024};
/* 14 scfbands */
static const SHORT sfb_48_128[15] = {0, 4, 8, 12, 16, 20, 28, 36, 44, 56, 68, 80, 96, 112, 128};

/* 51 scfbands */
static const SHORT sfb_32_1024[52] = {
    0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  48,  56,  64,  72,  80,  88,  96,
    108, 120, 132, 144, 160, 176, 196, 216, 240, 264, 292, 320, 352, 384, 416, 448, 480, 512,
    544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024};

/* 47 scfbands */
static const SHORT sfb_24_1024[48] = {0,   4,   8,   12,  16,  20,  24,  28,  32,  36,  40,  44,
                                      52,  60,  68,  76,  84,  92,  100, 108, 116, 124, 136, 148,
                                      160, 172, 188, 204, 220, 240, 260, 284, 308, 336, 364, 396,
                                      432, 468, 508, 552, 600, 652, 704, 768, 832, 896, 960, 1024};

/* 15 scfbands */
static const SHORT sfb_24_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 64, 76, 92, 108, 128};

/* 43 scfbands */
static const SHORT sfb_16_1024[44] = {0,   8,   16,  24,  32,  40,  48,  56,  64,  72,  80,
                                      88,  100, 112, 124, 136, 148, 160, 172, 184, 196, 212,
                                      228, 244, 260, 280, 300, 320, 344, 368, 396, 424, 456,
                                      492, 532, 572, 616, 664, 716, 772, 832, 896, 960, 1024};

/* 15 scfbands */
static const SHORT sfb_16_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 40, 48, 60, 72, 88, 108, 128};

/* 40 scfbands */
static const SHORT sfb_8_1024[41] = {0,   12,  24,  36,  48,  60,  72,  84,  96,  108, 120,
                                     132, 144, 156, 172, 188, 204, 220, 236, 252, 268, 288,
                                     308, 328, 348, 372, 396, 420, 448, 476, 508, 544, 580,
                                     620, 664, 712, 764, 820, 880, 944, 1024};

/* 15 scfbands */
static const SHORT sfb_8_128[16] = {0, 4, 8, 12, 16, 20, 24, 28, 36, 44, 52, 60, 72, 88, 108, 128};

const SFB_INFO sfbOffsetTables[5][16] = {{
                                             {sfb_96_1024, sfb_96_128, 41, 12},
                                             {sfb_96_1024, sfb_96_128, 41, 12},
                                             {sfb_64_1024, sfb_64_128, 47, 12},
                                             {sfb_48_1024, sfb_48_128, 49, 14},
                                             {sfb_48_1024, sfb_48_128, 49, 14},
                                             {sfb_32_1024, sfb_48_128, 51, 14},
                                             {sfb_24_1024, sfb_24_128, 47, 15},
                                             {sfb_24_1024, sfb_24_128, 47, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_16_1024, sfb_16_128, 43, 15},
                                             {sfb_8_1024, sfb_8_128, 40, 15},
                                             {sfb_8_1024, sfb_8_128, 40, 15},
                                         },
                                         {
                                             {NULL, NULL, 0, 0},
                                         },
                                         {
                                             {NULL, NULL, 0, 0},
                                         },
                                         {
                                             {NULL, NULL, 0, 0},
                                         },
                                         {
                                             {NULL, NULL, 0, 0},
                                         }};

const USHORT HuffmanCodeBook_SCL[65][4] = {
    {0x00f3, 0x00f3, 0x0004, 0x0008}, {0x00ef, 0x00ef, 0x00f5, 0x00e9},
    {0x00f9, 0x000c, 0x0010, 0x0014}, {0x00e7, 0x00e7, 0x00ff, 0x00ff},
    {0x00e1, 0x0101, 0x00dd, 0x0105}, {0x0018, 0x001c, 0x0020, 0x0028},
    {0x010b, 0x010b, 0x00db, 0x00db}, {0x010f, 0x010f, 0x00d5, 0x0111},
    {0x00d1, 0x0115, 0x00cd, 0x0024}, {0x011b, 0x011b, 0x00cb, 0x00cb},
    {0x002c, 0x0030, 0x0034, 0x0040}, {0x00c7, 0x00c7, 0x011f, 0x011f},
    {0x0121, 0x00c1, 0x0125, 0x00bd}, {0x0129, 0x00b9, 0x0038, 0x003c},
    {0x0133, 0x0133, 0x012f, 0x012f}, {0x0137, 0x0137, 0x013b, 0x013b},
    {0x0044, 0x0048, 0x004c, 0x0058}, {0x00b7, 0x00b7, 0x00af, 0x00af},
    {0x00b1, 0x013d, 0x00a9, 0x00a5}, {0x0141, 0x00a1, 0x0050, 0x0054},
    {0x0147, 0x0147, 0x009f, 0x009f}, {0x014b, 0x014b, 0x009b, 0x009b},
    {0x005c, 0x0060, 0x0064, 0x0070}, {0x014f, 0x014f, 0x0095, 0x008d},
    {0x0155, 0x0085, 0x0091, 0x0089}, {0x0151, 0x0081, 0x0068, 0x006c},
    {0x015f, 0x015f, 0x0167, 0x0167}, {0x007b, 0x007b, 0x007f, 0x007f},
    {0x0074, 0x0078, 0x0080, 0x00b0}, {0x0159, 0x0075, 0x0069, 0x006d},
    {0x0071, 0x0061, 0x0161, 0x007c}, {0x0067, 0x0067, 0x005b, 0x005b},
    {0x0084, 0x0088, 0x008c, 0x009c}, {0x005f, 0x005f, 0x0169, 0x0055},
    {0x004d, 0x000d, 0x0005, 0x0009}, {0x0001, 0x0090, 0x0094, 0x0098},
    {0x018b, 0x018b, 0x018f, 0x018f}, {0x0193, 0x0193, 0x0197, 0x0197},
    {0x019b, 0x019b, 0x01d7, 0x01d7}, {0x00a0, 0x00a4, 0x00a8, 0x00ac},
    {0x0187, 0x0187, 0x016f, 0x016f}, {0x0173, 0x0173, 0x0177, 0x0177},
    {0x017b, 0x017b, 0x017f, 0x017f}, {0x0183, 0x0183, 0x01a3, 0x01a3},
    {0x00b4, 0x00c8, 0x00dc, 0x00f0}, {0x00b8, 0x00bc, 0x00c0, 0x00c4},
    {0x01bf, 0x01bf, 0x01c3, 0x01c3}, {0x01c7, 0x01c7, 0x01cb, 0x01cb},
    {0x01cf, 0x01cf, 0x01d3, 0x01d3}, {0x01bb, 0x01bb, 0x01a7, 0x01a7},
    {0x00cc, 0x00d0, 0x00d4, 0x00d8}, {0x01ab, 0x01ab, 0x01af, 0x01af},
    {0x01b3, 0x01b3, 0x01b7, 0x01b7}, {0x01db, 0x01db, 0x001b, 0x001b},
    {0x0023, 0x0023, 0x0027, 0x0027}, {0x00e0, 0x00e4, 0x00e8, 0x00ec},
    {0x002b, 0x002b, 0x0017, 0x0017}, {0x019f, 0x019f, 0x01e3, 0x01e3},
    {0x01df, 0x01df, 0x0013, 0x0013}, {0x001f, 0x001f, 0x003f, 0x003f},
    {0x00f4, 0x00f8, 0x00fc, 0x0100}, {0x0043, 0x0043, 0x004b, 0x004b},
    {0x0053, 0x0053, 0x0047, 0x0047}, {0x002f, 0x002f, 0x0033, 0x0033},
    {0x003b, 0x003b, 0x0037, 0x0037}};

const CodeBookDescription AACcodeBookDescriptionSCL = {HuffmanCodeBook_SCL, 1, 8, 60};

/*
 * TNS_MAX_BANDS
 * entry for each sampling rate
 *  1  long window
 *  2  SHORT window
 */
const UCHAR tns_max_bands_tbl[13][2] = {
    {31, 9},  /* 96000 */
    {31, 9},  /* 88200 */
    {34, 10}, /* 64000 */
    {40, 14}, /* 48000 */
    {42, 14}, /* 44100 */
    {51, 14}, /* 32000 */
    {46, 14}, /* 24000 */
    {46, 14}, /* 22050 */
    {42, 14}, /* 16000 */
    {42, 14}, /* 12000 */
    {42, 14}, /* 11025 */
    {39, 14}, /*  8000 */
    {39, 14}, /*  7350 */
};

#define TCC(x) (FIXP_DBL(x))

const FIXP_TCC FDKaacDec_tnsCoeff3[8] = {TCC(0x81f1d1d4), TCC(0x9126146c), TCC(0xadb922c4),
                                         TCC(0xd438af1f), TCC(0x00000000), TCC(0x3789809b),
                                         TCC(0x64130dd4), TCC(0x7cca7016)};
const FIXP_TCC FDKaacDec_tnsCoeff4[16] = {
    TCC(0x808bc842), TCC(0x84e2e58c), TCC(0x8d6b49d1), TCC(0x99da920a),
    TCC(0xa9c45713), TCC(0xbc9ddeb9), TCC(0xd1c2d51b), TCC(0xe87ae53d),
    TCC(0x00000000), TCC(0x1a9cd9b6), TCC(0x340ff254), TCC(0x4b3c8c29),
    TCC(0x5f1f5ebb), TCC(0x6ed9ebba), TCC(0x79bc385f), TCC(0x7f4c7e5b)};

/*! Random sign bit used for concealment
 */
const USHORT AacDec_randomSign[AAC_NF_NO_RANDOM_VAL / 16] = {
    /*
       sign bits of FDK_sbrDecoder_sbr_randomPhase[] entries:
       LSB ........... MSB  ->    MSB ... LSB
    */
    /* 1001 0111 0011 1100  -> */ 0x3ce9,
    /* 0100 0111 0111 1011  -> */ 0xdee2,
    /* 0001 1100 1110 1011  -> */ 0xd738,
    /* 0001 0011 0110 1001  -> */ 0x96c8,
    /* 0101 0011 1101 0000  -> */ 0x0bca,
    /* 0001 0001 1111 0100  -> */ 0x2f88,
    /* 1110 1100 1110 1101  -> */ 0xb737,
    /* 0010 1010 1011 1001  -> */ 0x9d54,
    /* 0111 1100 0110 1010  -> */ 0x563e,
    /* 1101 0111 0010 0101  -> */ 0xa4eb,
    /* 0001 0101 1011 1100  -> */ 0x3da8,
    /* 0101 0111 1001 1011  -> */ 0xd9ea,
    /* 1101 0100 0101 0101  -> */ 0xaa2b,
    /* 1000 1001 0100 0011  -> */ 0xc291,
    /* 1100 1111 1010 1100  -> */ 0x35f3,
    /* 1100 1010 1110 0010  -> */ 0x4753,
    /* 0110 0001 1010 1000  -> */ 0x1586,
    /* 0011 0101 1111 1100  -> */ 0x3fac,
    /* 0001 0110 1010 0001  -> */ 0x8568,
    /* 0010 1101 0111 0010  -> */ 0x4eb4,
    /* 1101 1010 0100 1001  -> */ 0x925b,
    /* 1100 1001 0000 1110  -> */ 0x7093,
    /* 1000 1100 0110 1010  -> */ 0x5631,
    /* 0000 1000 0110 1101  -> */ 0xb610,
    /* 1000 0001 1111 1011  -> */ 0xdf81,
    /* 1111 0011 0100 0111  -> */ 0xe2cf,
    /* 1000 0001 0010 1010  -> */ 0x5481,
    /* 1101 0101 1100 1111  -> */ 0xf3ab,
    /* 0110 0001 0110 1000  -> */ 0x1686,
    /* 0011 0011 1100 0110  -> */ 0x63cc,
    /* 0011 0111 0101 0110  -> */ 0x6aec,
    /* 1011 0001 1010 0010  -> */ 0x458d};

/* MDST filter coefficients for current window
 * max: 0.635722 => 20 bits (unsigned) necessary for representation
 * min: = -max */
const FIXP_FILT mdst_filt_coef_curr[20][3] = {
    {FILT(0.000000f), FILT(0.000000f), FILT(0.500000f)},
    /*, FILT( 0.000000f), FILT(-0.500000f), FILT( 0.000000f), FILT( 0.000000f) }, */ /* only long /
                                                                                        eight short
                                                                                        l:sine
                                                                                        r:sine */
    {FILT(0.091497f), FILT(0.000000f), FILT(0.581427f)},
    /*, FILT( 0.000000f), FILT(-0.581427f), FILT( 0.000000f), FILT(-0.091497f) }, */ /*                          l:kbd
                                                                                        r:kbd  */
    {FILT(0.045748f), FILT(0.057238f), FILT(0.540714f)},
    /*, FILT( 0.000000f), FILT(-0.540714f), FILT(-0.057238f), FILT(-0.045748f) }, */ /*                          l:sine
                                                                                        r:kbd  */
    {FILT(0.045748f), FILT(-0.057238f), FILT(0.540714f)},
    /*, FILT( 0.000000f), FILT(-0.540714f), FILT( 0.057238f), FILT(-0.045748f) }, */ /*                          l:kbd
                                                                                        r:sine */

    {FILT(0.102658f), FILT(0.103791f), FILT(0.567149f)},
    /*, FILT( 0.000000f), FILT(-0.567149f), FILT(-0.103791f), FILT(-0.102658f) }, */ /* long start
                                                                                      */
    {FILT(0.150512f), FILT(0.047969f), FILT(0.608574f)}, /*, FILT( 0.000000f), FILT(-0.608574f),
                                                            FILT(-0.047969f), FILT(-0.150512f) }, */
    {FILT(0.104763f), FILT(0.105207f), FILT(0.567861f)}, /*, FILT( 0.000000f), FILT(-0.567861f),
                                                            FILT(-0.105207f), FILT(-0.104763f) }, */
    {FILT(0.148406f), FILT(0.046553f), FILT(0.607863f)}, /*, FILT( 0.000000f), FILT(-0.607863f),
                                                            FILT(-0.046553f), FILT(-0.148406f) }, */

    {FILT(0.102658f), FILT(-0.103791f), FILT(0.567149f)},
    /*, FILT( 0.000000f), FILT(-0.567149f), FILT( 0.103791f), FILT(-0.102658f) }, */ /* long stop */
    {FILT(0.150512f), FILT(-0.047969f),
     FILT(0.608574f)}, /*, FILT( 0.000000f), FILT(-0.608574f), FILT( 0.047969f), FILT(-0.150512f) },
                        */
    {FILT(0.148406f), FILT(-0.046553f),
     FILT(0.607863f)}, /*, FILT( 0.000000f), FILT(-0.607863f), FILT( 0.046553f), FILT(-0.148406f) },
                        */
    {FILT(0.104763f), FILT(-0.105207f),
     FILT(0.567861f)}, /*, FILT( 0.000000f), FILT(-0.567861f), FILT( 0.105207f), FILT(-0.104763f) },
                        */

    {FILT(0.205316f), FILT(0.000000f), FILT(0.634298f)},
    /*, FILT( 0.000000f), FILT(-0.634298f), FILT( 0.000000f), FILT(-0.205316f) }, */ /* stop start
                                                                                      */
    {FILT(0.209526f), FILT(0.000000f), FILT(0.635722f)},  /*, FILT( 0.000000f), FILT(-0.635722f),
                                                             FILT( 0.000000f), FILT(-0.209526f) }, */
    {FILT(0.207421f), FILT(0.001416f), FILT(0.635010f)},  /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT(-0.001416f), FILT(-0.207421f) }, */
    {FILT(0.207421f), FILT(-0.001416f), FILT(0.635010f)}, /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT( 0.001416f), FILT(-0.207421f) } */

    {FILT(0.185618f), FILT(0.000000f), FILT(0.627371f)},
    /*, FILT( 0.000000f), FILT(-0.634298f), FILT( 0.000000f), FILT(-0.205316f) }, */ /* stop start
                                                                                        Transform
                                                                                        Splitting */
    {FILT(0.204932f), FILT(0.000000f), FILT(0.634159f)},  /*, FILT( 0.000000f), FILT(-0.635722f),
                                                             FILT( 0.000000f), FILT(-0.209526f) }, */
    {FILT(0.194609f), FILT(0.006202f), FILT(0.630536f)},  /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT(-0.001416f), FILT(-0.207421f) }, */
    {FILT(0.194609f), FILT(-0.006202f), FILT(0.630536f)}, /*, FILT( 0.000000f), FILT(-0.635010f),
                                                             FILT( 0.001416f), FILT(-0.207421f) } */
};

/* MDST filter coefficients for previous window
 * max: 0.31831 => 15 bits (unsigned) necessary for representation
 * min: 0.0 */
const FIXP_FILT mdst_filt_coef_prev[6][4] = {
    {FILT(0.000000f), FILT(0.106103f), FILT(0.250000f), FILT(0.318310f)},
    /*, FILT( 0.250000f), FILT( 0.106103f), FILT( 0.000000f) }, */ /* only long / long start / eight
                                                                      short  l:sine */
    {FILT(0.059509f), FILT(0.123714f), FILT(0.186579f), FILT(0.213077f)},
    /*, FILT( 0.186579f), FILT( 0.123714f), FILT( 0.059509f) }, */ /*                                       l:kbd
                                                                    */

    {FILT(0.038498f), FILT(0.039212f), FILT(0.039645f), FILT(0.039790f)},
    /*, FILT( 0.039645f), FILT( 0.039212f), FILT( 0.038498f) }, */ /* long stop / stop start  l:sine
                                                                    */
    {FILT(0.026142f), FILT(0.026413f), FILT(0.026577f), FILT(0.026631f)},
    /*, FILT( 0.026577f), FILT( 0.026413f), FILT( 0.026142f) }  */ /*                         l:kbd
                                                                    */

    {FILT(0.069608f), FILT(0.075028f), FILT(0.078423f), FILT(0.079580f)},
    /*, FILT( 0.039645f), FILT( 0.039212f), FILT( 0.038498f) }, */ /* Transform splitting     l:sine
                                                                    */
    {FILT(0.042172f), FILT(0.043458f), FILT(0.044248f), FILT(0.044514f)},
    /*, FILT( 0.026577f), FILT( 0.026413f), FILT( 0.026142f) }  */ /*                         l:kbd
                                                                    */
};
